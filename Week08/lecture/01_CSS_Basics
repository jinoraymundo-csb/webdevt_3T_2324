# CSS basics

CSS (**Cascading Style Sheets**) is used to style and lay out web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features.

---

## What is CSS?

Like HTML, CSS is not a programming language. It's not a markup language either. CSS is a **style sheet language**. CSS is what you use to selectively style HTML elements.

> Week07\sandbox\index.html

```
<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="styles.css">
  <title>De La Salle - College of St. Benilde: Information Systems Program</title>
</head>

<body>
  <h1>Bachelor of Science in Information Systems</h1>

  <img src="isp_logo.png" alt="ISP Logo">

  <h2>1s and 0s are not just numbers</h2>
  <p>
    This course is for you if you believe in the importance of effective communication 
    to every aspect of human existence. You will learn to:
  </p>  

  <ul>
    <li>apply system analysis and design concepts through various data gathering methodologies, standard convention and modelling languages to create a software documentation;</li>
    <li>create dynamic and secured web and mobile using software development tools and industry-standard frameworks applications to meet system requirements;</li>
    <li>adapt a project management integration framework guided by professional, ethical, and legal best practices in the community to ensure that projects are executed on time and within budget; and</li>
    <li>work independently in a God-centered professional practice with excellence, integrity, creativity and innovation sensitive to inclusivity and social responsibility.</li>
  </ul>  
  
</body>

</html>
```

> Week07\sandbox\styles.css

```
p {
  color: red;
}
```

> to link `styles.css` to `index.html`, add the following line somewhere inside the `<head>` of the HTML document:

`<link rel="stylesheet" href="styles.css" />`

This `<link>` element tells the browser that we have a stylesheet, using the `rel` attribute, and the location of that stylesheet as the value of the `href` attribute.

---

## Anatomy of a CSS ruleset

![alt text](images\anatomy.png)

The whole structure is called a **ruleset**. (The term ruleset is often referred to as just rule.) Note the names of the individual parts:

Selector
: This is the HTML element name at the start of the ruleset. It defines the element(s) to be styled (in this example, `<p>` elements). To style a different element, change the selector.

Declaration
: This is a single rule like `color: red;`. It specifies which of the element's properties you want to style.

Properties
: These are ways in which you can style an HTML element. (In this example, `color` is a property of the `<p>` elements.) In CSS, you choose which properties you want to affect in the rule.

Property Value
: To the right of the property—after the colon—there is the **property value**. This chooses one out of many possible appearances for a given property. (For example, there are many `color` values in addition to `red`.)

Note the other important parts of the syntax:
* Apart from the selector, each ruleset must be wrapped in curly braces. (`{}`)
* Within each declaration, you must use a colon (`:`) to separate the property from its value or values.
* Within each ruleset, you must use a semicolon (`;`) to separate each declaration from the next one.

 To modify multiple property values in one ruleset, write them separated by semicolons, like this:

 ```
p {
  color: red;
  width: 500px;
  border: 1px solid black;
}
 ```

You can also select multiple elements and apply a single ruleset to all of them. Separate multiple selectors by commas. For example:

```
p,
li,
h1 {
  color: red;
}
```

---

## Different types of selectors

![alt text](images\selectors.png)

---

## Fonts and Texts

1. Go to this [URL](https://fonts.google.com/specimen/Space+Mono?query=space+mono)
2. On the upper-right corner of the page, click on the "Get font" button
3. On the new page, clock on the "Get embed code" button
4. Locate the code on this new page, and click on "Copy code"
5. Paste this within your `<head>` element
6. Clear (erase) the contents of `styles.css` and replace it with:
```
html {
  font-size: 10px;
  font-family: "Space Mono", sans-serif;
}
```
7. Set the font sizes for elements that will have text inside the HTML body 
(`<h1>`, `<li>`, and `<p>`). Also we're now aligning the heading to the center
```
h1 {
  font-size: 60px;
  text-align: center;
}

p,
li {
  font-size: 16px;
  line-height: 2;
  letter-spacing: 1px;
}
```

---

## CSS: all about boxes

Something you'll notice about writing CSS: a lot of it is about boxes. This includes setting **size**, **color**, and **position**. Most HTML elements on your page can be thought of as boxes sitting on top of other boxes.

![Stack of Boxes](images\stack_of_boxes.png)

CSS layout is mostly based on the **box model**. Each box taking up space on your page has properties like:

* `padding` - the space around the content
* `border` - the solid line that is just outside the padding
* `margin` - the space around the outside of the border
  
![Box Model](images\box_model.png)


### Changing the page color and styling the body

additional properties to consider:

* `width` - the measurement from left to right
* `background-color` - the color behind an element's content and padding
* `color` - the color of an element's content (usually text)
* `text-shadow` - sets a drop shadow on the text inside an element
* `display` - sets the display mode of an element

> change the page color by assigning the property `background-color` on the `html` selector (`styles.css`), with the value #00539f

```
body {
  width: 1200px;
  margin: 0 auto;
  background-color: #ff9500;
  padding: 0 20px 20px 20px;
  border: 5px solid black;
}
```

> declare this preceding ruleset after the `html` ruleset

* `width: 1200px;` - this forces the `body` to always be 1200 pixels wide
* `margin: 0 auto;` - When you set two values on a property like **margin** or **padding**, the first value affects the element's top and bottom side (setting it to 0 in this case); the second value affects the left and right side. (Here, `auto` is a special value that divides the available horizontal space evenly between left and right). You can also use one, two, three, or four values.
* `background-color: #ff9500;` - This sets the element's background color. This project uses a reddish orange for the body background color, as opposed to dark blue for the `<html>` element.
* `padding: 0 20px 20px 20px;` -  This sets four values for **padding**. The goal is to put some space around the content. In this example, there is no padding on the top of the body, and 20 pixels on the right, bottom and left. The values set top, right, bottom, left, in that order. As with margin, you can use one, two, three, or four values
* `border: 1px solid black;` - This sets values for the width, style and color of the border. In this case, it's a five-pixel–wide, solid black border, on all sides of the body.

### Positioning and styling the main page title

You may have noticed there's a horrible gap at the top of the body. That happens because browsers apply default styling to the `h1` element (among others). That might seem like a bad idea, but the intent is to provide basic readability for unstyled pages. To eliminate the gap, we overwrite the browser's default styling with the setting `margin: 0;`.

Next, we set the heading's top and bottom padding to 20 pixels.

Following that, we set the heading text to be the same color as the HTML background color.

Finally, `text-shadow` applies a shadow to the text content of the element. Its four values are:

* The first pixel value sets the **horizontal offset** of the shadow from the text: how far it moves across.
* The second pixel value sets the **vertical offset** of the shadow from the text: how far it moves down.
* The third pixel value sets the **blur radius** of the shadow. A larger value produces a more fuzzy-looking shadow.
* The fourth value sets the base color of the shadow.

```
h1 {
  margin: 0;
  padding: 20px 0;
  color: #00539f;
  text-shadow: 3px 3px 1px black;
}
```

### Centering the image

Next, we center the image to make it look better. We could use the `margin: 0` auto trick again as we did for the body. But there are differences that require an additional setting to make the CSS work.

```
img {
  display: block;
  margin: 0 auto;
}
```

The `<body>` is a block element, meaning it takes up space on the page. The margin applied to a block element will be respected by other elements on the page. In contrast, images are *inline* elements, for the auto margin trick to work on this image, we must give it block-level behavior using `display: block;`.

---